{"version":3,"sources":["giphy.gif","components/Square.js","components/Board.js","components/Game.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","styles","textAlign","Game","useState","Array","fill","board","setBoard","xIsNext","serXisNext","winner","lines","length","a","b","c","calculateWinner","boardCopy","className","src","giphy","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,mC,wKCErCC,EAAQ,CACVC,WAAa,YACbC,OAAS,qBACTC,SAAW,OACXC,WAAa,MACbC,OAAS,UACTC,QAAU,QAOCC,EAJA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACb,4BAAQT,MAAOA,EAAOS,QAASA,GAAUD,ICTrCR,EAAQ,CACVE,OAAQ,iBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,iCAUHC,EAPD,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAQR,EAAV,EAAUA,QAAV,OACZ,yBAAKT,MAAOA,GACRiB,EAAQC,KAAI,SAACC,EAAOC,GAAR,OACR,kBAAC,EAAD,CAAQC,IAAKD,EAAGZ,MAAOW,EAAQV,QAAS,kBAAIA,EAAQW,W,sBCX9D,IAAME,EAAS,CACbC,UAAW,SACXV,OAAQ,aA6CKW,EAzCF,WAAO,IAAD,EACSC,mBAASC,MAAM,GAAGC,KAAK,OADhC,mBACVC,EADU,KACHC,EADG,OAEaJ,oBAAS,GAFtB,mBAEVK,EAFU,KAEDC,EAFC,KAGXC,ECdD,SAAyBf,GAW/B,IAVA,IAAMgB,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAECb,EAAI,EAAGA,EAAIa,EAAMC,OAAQd,IAAK,CAAC,IAAD,cACpBa,EAAMb,GADc,GAC/Be,EAD+B,KAC5BC,EAD4B,KACzBC,EADyB,KAEtC,GAAIpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GACrE,OAAOpB,EAAQkB,GAGjB,OAAO,KDHSG,CAAgBV,GAkB/B,OACE,oCACE,kBAAC,EAAD,CAAOX,QAASW,EAAOnB,QAnBP,SAACW,GACnB,IAAMmB,EAAS,YAAOX,GAGlBI,GAAUO,EAAUnB,KAExBmB,EAAUnB,GAAKU,EAAU,IAAM,IAC/BD,EAASU,GACTR,GAAYD,OAUZ,IAEE,yBAAK9B,MAAOsB,GACV,uBAAGkB,UAAYR,EAAS,SAAW,IAChCA,EACG,WAAaA,EACb,iBAAmBF,EAAU,IAAM,MAV7C,4BAAQU,UAAU,YAAY/B,QAAS,kBAAMoB,EAASH,MAAM,GAAGC,KAAK,SAApE,eAcE,yBAAKa,UAAU,gBAEZR,EACA,yBAAKQ,UAAU,OAAOC,IAAKC,IAAOC,IAAI,SACnC,QEtCGC,EAPH,kBAEV,6BACE,kBAAC,EAAD,QCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a4c3c749.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/giphy.8421c7ef.gif\";","import React from \"react\";\r\n\r\nconst style = {\r\n    background : 'lightblue',\r\n    border : '2px solid darkblue',\r\n    fontSize : '30px',\r\n    fontWeight : '800',\r\n    cursor : 'pointer',\r\n    outline : 'none'\r\n}\r\n\r\nconst Square = ({ value, onClick }) => (\r\n  <button style={style} onClick={onClick}>{value}</button>\r\n);\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst style = {\r\n    border: \"4px solid dark\",\r\n    borderRadius: \"10px\",\r\n    width: \"250px\",\r\n    height: \"250px\",\r\n    margin: \"0 auto\",\r\n    display: \"grid\",\r\n    gridTemplate: \"repeat(3,1fr) / repeat(3,1fr)\",\r\n  };\r\n  \r\nconst Board = ({squares,onClick}) =>\r\n (<div style={style}>\r\n     {squares.map((square,i)=>(\r\n          <Square key={i} value={square} onClick={()=>onClick(i)}></Square>\r\n     ))}\r\n     </div>)\r\n\r\nexport default Board;","import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nimport giphy from '../giphy.gif';\r\nimport \"../styles.css\";\r\nimport { calculateWinner } from \"../helpers\";\r\nconst styles = {\r\n  textAlign: \"center\",\r\n  margin: \"20px auto\",\r\n};\r\n\r\nconst gifStyle = {};\r\nconst Game = () => {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [xIsNext, serXisNext] = useState(true);\r\n  const winner = calculateWinner(board);\r\n  const handleClick = (i) => {\r\n    const boardCopy = [...board];\r\n\r\n    //if user click an occupies square or if game is won , return\r\n    if (winner || boardCopy[i]) return;\r\n    //put X or O on clicked square\r\n    boardCopy[i] = xIsNext ? \"X\" : \"O\";\r\n    setBoard(boardCopy);\r\n    serXisNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = () => {};\r\n\r\n  const renderMoves = () => (\r\n    <button className=\"start-btn\" onClick={() => setBoard(Array(9).fill(null))}>Start Game</button>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Board squares={board} onClick={handleClick} />;\r\n      <div style={styles}>\r\n        <p className={ winner ? 'winner' : ''}>\r\n          {winner\r\n            ? \"Winner: \" + winner\r\n            : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}\r\n        </p>\r\n        {renderMoves()}\r\n      </div>\r\n      <div className=\"winning-logo\"> \r\n     \r\n        {winner ? (\r\n         <img className=\"logo\" src={giphy} alt=\"logo\" />\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Game;\r\n","export function calculateWinner(squares) {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t];\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t\t\treturn squares[a];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}","import React from \"react\";\nimport Game from \"./components/Game\";\nconst App = () => (\n  \n  <div>\n    <Game />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}